from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from config_data.config import logger
from database.functions import get_all_themes

def main_kb():
    kb_list = [
        [KeyboardButton(text="üìö –§—Ä–∞–∑–∞ –¥–Ω—è")],
        [KeyboardButton(text="üìñ –ò–∑—É—á–∞–µ–º —Å–ª–æ–≤–∞"), KeyboardButton(text="üìù –¢—Ä–µ–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–∞")],
        [KeyboardButton(text="ü§ñ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton(text="üìù –ü—Ä–∏–º–µ—Ä —Å–æ —Å–ª–æ–≤–æ–º")],
        [KeyboardButton(text="üîç –°—Ç–∞—Ç—É—Å AI")]

    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:"
    )
    return keyboard
# KeyboardButton(text="üë§ –û —á—ë–º —ç—Ç–æ –≤—Å—ë")

async def theme_keyboard(session: AsyncSession)-> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –∏–∑ –ë–î."""
    builder = ReplyKeyboardBuilder()

    try:
        themes = await get_all_themes(session)
        for theme in themes:
            builder.add(KeyboardButton(text=theme.name))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º: {str(e)}")
        builder.add(KeyboardButton(text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"))

    builder.button(text='–ù–∞–∑–∞–¥')
    builder.adjust(2, 4, 2, 2, 4)
    return builder.as_markup(resize_keyboard=True,
                             input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:")


def ai_explain_kb():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤.

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–ª–æ–≤ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    """
    kb_list = [
        [KeyboardButton(text="–û–±—ä—è—Å–Ω–∏—Ç—å: ciao"), KeyboardButton(text="–û–±—ä—è—Å–Ω–∏—Ç—å: amore")],
        [KeyboardButton(text="–û–±—ä—è—Å–Ω–∏—Ç—å: grazie"), KeyboardButton(text="–û–±—ä—è—Å–Ω–∏—Ç—å: per favore")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë:"
    )
    return keyboard


def ai_example_kb():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤.

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–ª–æ–≤
    """
    kb_list = [
        [KeyboardButton(text="–ü—Ä–∏–º–µ—Ä: casa"), KeyboardButton(text="–ü—Ä–∏–º–µ—Ä: tempo")],
        [KeyboardButton(text="–ü—Ä–∏–º–µ—Ä: lavoro"), KeyboardButton(text="–ü—Ä–∏–º–µ—Ä: bello")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë:"
    )
    return keyboard
