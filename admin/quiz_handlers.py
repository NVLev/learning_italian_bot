import random
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timezone

from config_data.config import logger
from database.functions import get_words_by_theme_id
from inline_keyboard.inline_kb_w_call_back import (
    create_quiz_keyboard,
    create_next_question_keyboard,
    generate_quiz_options
)
from utils.states import Quiz
from services.user_service import UserService
from model.model import User, Vocabulary



quiz_router = Router()



@quiz_router.callback_query(F.data.in_({str(i) for i in range(1, 19)}), Quiz.quiz_start)
async def quiz_word_by_theme(
        callback: CallbackQuery,
        state: FSMContext,
        session: AsyncSession,
        db_user: User | None = None
):
    """
    –ö–≤–∏–∑ - –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    """
    logger.info('quiz filter worked')
    current_state = await state.get_state()
    logger.info(f'Current state: {current_state}')
    if db_user is None:
        # –ï—Å–ª–∏ middleware –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å–æ–∑–¥–∞–µ–º / –¥–æ—Å—Ç–∞–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        logger.warning("db_user not found in data, fetching from DB via UserService.get_or_create_user()")
        user = await UserService.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
    else:
        user = db_user

    try:
        theme_id = int(callback.data)
        logger.info(f"Starting quiz for theme_id={theme_id}")

        words = await get_words_by_theme_id(session, theme_id)
        if not words:
            await callback.message.answer("–í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üòî")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        current_word = random.choice(words)
        possible_answers = generate_quiz_options(words, current_word)
        keyboard = create_quiz_keyboard(
            possible_answers=possible_answers,
            correct_answer=current_word.rus_word,
            theme_id=callback.data,
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        user_data = await state.get_data()
        if not user_data.get('session_started'):
            await state.update_data(
                session_started=True,
                session_start_time=datetime.now(timezone.utc),
                correct_count=0,
                wrong_count=0,
                theme_id=theme_id
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await state.update_data(
            correct_answer=current_word.rus_word,
            italian_word=current_word.italian_word,
            current_word_id=current_word.id  # ‚Üê –í–ê–ñ–ù–û! –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n\n<b>{current_word.italian_word}</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in quiz_word_by_theme: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")


@quiz_router.callback_query(F.data.startswith("answer_"))
async def check_answer(
        callback: CallbackQuery,
        state: FSMContext,
        session: AsyncSession,
        db_user: User | None = None
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞:
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–ª–æ–≤—É
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    - –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    """
    if db_user is None:
        user = await UserService.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
    else:
        user = db_user
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        data = callback.data.split("_")
        is_correct_int = int(data[1])
        theme_id = data[2]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bool
        is_correct = is_correct_int == 1

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        correct_answer = user_data.get("correct_answer", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        italian_word = user_data.get("italian_word", "")
        current_word_id = user_data.get('current_word_id')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–µ—Å—Å–∏–∏
        correct_count = user_data.get('correct_count', 0)
        wrong_count = user_data.get('wrong_count', 0)

        if is_correct:
            correct_count += 1
            response = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –ú–æ–ª–æ–¥–µ—Ü!"
        else:
            wrong_count += 1
            response = (
                f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
                f"<i>{italian_word}</i> = <b>{correct_answer}</b>"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        await state.update_data(
            correct_count=correct_count,
            wrong_count=wrong_count
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–ª–æ–≤—É (–µ—Å–ª–∏ –µ—Å—Ç—å word_id)
        if current_word_id:
            try:
                await UserService.update_word_progress(
                    session=session,
                    user_id=db_user.id,
                    word_id=current_word_id,
                    is_correct=is_correct
                )
                logger.info(
                    f"Progress saved: user={db_user.id}, word={current_word_id}, "
                    f"correct={is_correct}"
                )
            except Exception as e:
                logger.error(f"Error saving word progress: {e}")
        else:
            logger.warning("current_word_id not found in state")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        total = correct_count + wrong_count
        accuracy = (correct_count / total * 100) if total > 0 else 0

        response += (
            f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:</b>\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {wrong_count}\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.0f}%"
        )

        await callback.message.answer(response, parse_mode="HTML")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        await callback.message.answer(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
            reply_markup=create_next_question_keyboard(theme_id)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in check_answer: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")


@quiz_router.callback_query(F.data == "back", Quiz.quiz_start)
async def end_quiz_session(
        callback: CallbackQuery,
        state: FSMContext,
        db_user: User,
        session: AsyncSession
):
    """
    –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    """
    try:
        user_data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞
        if not user_data.get('session_started'):
            await callback.message.answer("–ö–≤–∏–∑ –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç")
            await state.clear()
            return

        correct_count = user_data.get('correct_count', 0)
        wrong_count = user_data.get('wrong_count', 0)
        theme_id = user_data.get('theme_id')
        session_start_time = user_data.get('session_start_time')

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration_seconds = None
        if session_start_time:
            duration = datetime.now(timezone.utc) - session_start_time
            duration_seconds = int(duration.total_seconds())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
        if correct_count > 0 or wrong_count > 0:
            await UserService.save_training_session(
                session=session,
                user_id=db_user.id,
                session_type='quiz',
                theme_id=theme_id,
                correct_answers=correct_count,
                wrong_answers=wrong_count,
                duration_seconds=duration_seconds
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
            total = correct_count + wrong_count
            accuracy = (correct_count / total * 100) if total > 0 else 0

            response = (
                f"üéâ <b>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìä <b>–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {wrong_count}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.0f}%\n"
                f"‚è± –í—Ä–µ–º—è: {duration_seconds // 60} –º–∏–Ω {duration_seconds % 60} —Å–µ–∫\n\n"
                f"‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: {correct_count * 10 + wrong_count * 2} XP"
            )

            await callback.message.answer(response, parse_mode="HTML")
            logger.info(f"Quiz session saved for user {db_user.id}")

        await state.clear()
        await callback.answer("–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"Error in end_quiz_session: {e}", exc_info=True)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        await state.clear()