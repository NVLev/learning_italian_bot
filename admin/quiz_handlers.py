import random

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from config_data.config import logger
from database.functions import get_words_by_theme_id
from inline_keyboard.inline_kb_w_call_back import (
    create_quiz_keyboard,
    create_next_question_keyboard,
    generate_quiz_options
)
from utils.states import Quiz

quiz_router = Router()


# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ç–µ–º—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ - "–¢—Ä–µ–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–∞"
# (—Ç.–µ. —Å–æ—Å—Ç–æ—è–Ω–∏–µ - quiz_start)- –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ
@quiz_router.callback_query(F.data.in_({str(i) for i in range(1, 19)}), Quiz.quiz_start)
async def quiz_word_by_theme(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession  # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
):
    """
    –ö–≤–∏–∑
    - –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ —Ç–µ–±–µ –∏–∑ –ë–î (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏ –≤ "–ò–∑—É—á–∞–µ–º —Å–ª–æ–≤–∞)
    - —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ–≥–æ –æ–¥–Ω—É –ø–∞—Ä—É –∏—Ç-—Ä—É—Å
    - –ø–µ—Ä–µ–¥–∞—ë–º –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç + 3 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö
    - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    - –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    logger.info('filter worked')
    current_state = await state.get_state()
    logger.info(f'{current_state}')
    try:
        logger.info(callback.data)
        words = await get_words_by_theme_id(session, int(callback.data))
        if not words:
            await callback.message.answer("–í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üòî")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        current_word = random.choice(words)

        possible_answers = generate_quiz_options(words, current_word)
        keyboard = create_quiz_keyboard(
            possible_answers=possible_answers,
            correct_answer=current_word.rus_word,
            theme_id=callback.data,

        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(correct_answer=current_word.rus_word,
                                theme_id=callback.data,
                                italian_word=current_word.italian_word )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n\n{current_word.italian_word}",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error in quiz_word_by_theme: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")



@quiz_router.callback_query(F.data.startswith("answer_"))
async def check_answer(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞:
        - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        - –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        """
    try:
        data = callback.data.split("_")
        is_correct = int(data[1])
        theme_id = data[2]
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        correct_answer = user_data.get("correct_answer", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        if is_correct:
            await callback.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        else:
            await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
                                      reply_markup=create_next_question_keyboard(theme_id))
    except Exception as e:
        logger.error(f"Error in check_answer: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

    # await state.clear()
