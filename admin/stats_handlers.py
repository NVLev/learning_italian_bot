"""
Handlers –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from services.user_service import UserService
from reply_keyboard.rep_kb import main_kb
from model.model import User
from config_data.config import logger



router = Router()


@router.message(Command("stats"))
@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: Message, db_user: User, session):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        db_user: User object (–∏–∑ middleware)
        session: Database session (–∏–∑ middleware)
    """
    try:
        stats = await UserService.get_user_stats(
            session=session,
            telegram_id=message.from_user.id
        )

        if not stats:
            await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        words_by_status = stats.get('words_by_status', {})

        response = (
            f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üë§ –£—Ä–æ–≤–µ–Ω—å: {stats['level']} "
            f"(‚≠ê {stats['experience_points']} XP)\n\n"

            f"üìö **–°–ª–æ–≤–∞:**\n"
            f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ: {stats['total_words_learned']}\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ: {words_by_status.get('new', 0)}\n"
            f"‚Ä¢ –ò–∑—É—á–∞—é—Ç—Å—è: {words_by_status.get('learning', 0)}\n"
            f"‚Ä¢ –í—ã—É—á–µ–Ω—ã: {words_by_status.get('learned', 0)}\n"
            f"‚Ä¢ –û—Å–≤–æ–µ–Ω—ã: {words_by_status.get('mastered', 0)}\n\n"

            f"üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {stats['accuracy']:.1f}%\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['total_correct']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {stats['total_wrong']}\n\n"

            f"üî• **Streak:** {stats['current_streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
            f"üèÜ –õ—É—á—à–∏–π: {stats['longest_streak']} –¥–Ω–µ–π\n\n"

            f"üìù –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}\n"
        )

        await message.answer(response, parse_mode="Markdown", reply_markup=main_kb())

    except Exception as e:
        logger.error(f"Error in cmd_stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("level"))
async def cmd_level(message: Message, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ.

    Args:
        db_user: User object (–∏–∑ middleware)
    """
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    next_level_xp = db_user.level * 100
    current_level_xp = (db_user.level - 1) * 100
    progress_xp = db_user.experience_points - current_level_xp
    needed_xp = next_level_xp - db_user.experience_points

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_percent = (progress_xp / 100) * 100
    progress_bar = "‚ñà" * int(progress_percent / 10) + "‚ñë" * (10 - int(progress_percent / 10))

    response = (
        f"‚≠ê **–£—Ä–æ–≤–µ–Ω—å {db_user.level}**\n\n"
        f"–û–ø—ã—Ç: {db_user.experience_points} XP\n"
        f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {needed_xp} XP\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n{progress_bar} {progress_percent:.0f}%\n\n"
        f"üí° –ü–æ–ª—É—á–∞–π –æ–ø—ã—Ç –∑–∞:\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +10 XP\n"
        f"‚Ä¢ –ü–æ–ø—ã—Ç–∫–∞ (–¥–∞–∂–µ –æ—à–∏–±–∫–∞): +2 XP\n"
        f"‚Ä¢ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥—ã–µ 100 XP"
    )

    await message.answer(response, parse_mode="Markdown")


@router.message(Command("streak"))
@router.message(F.text == "üî• –ú–æ–π streak")
async def cmd_streak(message: Message, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ streak.

    Args:
        db_user: User object (–∏–∑ middleware)
    """
    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç streak
    if db_user.current_streak >= 30:
        emoji = "üî•üî•üî•"
    elif db_user.current_streak >= 7:
        emoji = "üî•üî•"
    elif db_user.current_streak >= 3:
        emoji = "üî•"
    else:
        emoji = "üí™"

    response = (
        f"{emoji} **–¢–≤–æ–π Streak**\n\n"
        f"–¢–µ–∫—É—â–∏–π: {db_user.current_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
        f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {db_user.longest_streak} –¥–Ω–µ–π\n\n"
    )

    if db_user.current_streak == 0:
        response += "üí° –ù–∞—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å streak!"
    elif db_user.current_streak < 7:
        response += f"üí™ –ï—â—ë {7 - db_user.current_streak} –¥–Ω–µ–π –¥–æ –Ω–µ–¥–µ–ª–∏ –ø–æ–¥—Ä—è–¥!"
    elif db_user.current_streak < 30:
        response += f"üéØ –ï—â—ë {30 - db_user.current_streak} –¥–Ω–µ–π –¥–æ –º–µ—Å—è—Ü–∞!"
    else:
        response += "üèÜ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä!"

    await message.answer(response, parse_mode="Markdown")