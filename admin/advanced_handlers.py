from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import random
from services.conversation_service import ConversationService
from services.exercise_service import ExerciseService
from reply_keyboard.rep_kb import main_kb
import logging

logger = logging.getLogger(__name__)

router = Router()
conversation_service = ConversationService()
exercise_service = ExerciseService()


class ConversationStates(StatesGroup):
    waiting_for_reply = State()


class ExerciseStates(StatesGroup):
    waiting_for_gap_answer = State()
    waiting_for_quiz_answer = State()


# –î–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º
@router.message(Command("conversation"))
@router.message(F.text == "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞")
async def start_conversation_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    if not conversation_service.enabled:
        await message.answer("‚ùå –î–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    italian_phrase, russian_translation = await conversation_service.start_conversation()

    await message.answer(
        f"üáÆüáπ **–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π!**\n\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {italian_phrase}\n"
        f"üìñ –ü–µ—Ä–µ–≤–æ–¥: {russian_translation}\n\n"
        f"*–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º:*",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
            resize_keyboard=True
        )
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    await state.update_data(
        conversation_history=[{"role": "assistant", "content": italian_phrase}]
    )
    await state.set_state(ConversationStates.waiting_for_reply)


@router.message(ConversationStates.waiting_for_reply)
async def handle_conversation_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    if message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=main_kb())
        await state.clear()
        return

    user_data = await state.get_data()
    conversation_history = user_data.get("conversation_history", [])

    italian_response, russian_translation, new_history, correction = await conversation_service.continue_conversation(
        message.text, conversation_history
    )

    response_text = f"üáÆüáπ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {italian_response}\nüìñ –ü–µ—Ä–µ–≤–æ–¥: {russian_translation}"
    if correction:
        response_text += f"\n\nüîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {correction}"

    await message.answer(response_text)

    await state.update_data(conversation_history=new_history)


# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
@router.message(Command("exercise"))
@router.message(F.text == "üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def send_exercise(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    if not exercise_service.enabled:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_type = random.choice(["gap_fill", "quiz"])

    if exercise_type == "gap_fill":
        exercise = await exercise_service.generate_gap_exercise()
        if exercise:
            await message.answer(
                f"üî§ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∏**\n\n"
                f"{exercise['exercise']}\n\n"
                f"*–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:*",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")]],
                    resize_keyboard=True
                )
            )
            await state.update_data(current_exercise=exercise)
            await state.set_state(ExerciseStates.waiting_for_gap_answer)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", reply_markup=main_kb())

    else:  # quiz
        exercise = await exercise_service.generate_quiz()
        if exercise:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="A"), KeyboardButton(text="B")],
                    [KeyboardButton(text="C"), KeyboardButton(text="D")],
                    [KeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")]
                ],
                resize_keyboard=True
            )

            await message.answer(
                f"‚ùì **–í–∏–∫—Ç–æ—Ä–∏–Ω–∞**\n\n{exercise['question']}",
                reply_markup=kb
            )
            await state.update_data(current_exercise=exercise)
            await state.set_state(ExerciseStates.waiting_for_quiz_answer)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", reply_markup=main_kb())


@router.message(ExerciseStates.waiting_for_gap_answer)
async def check_gap_answer(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"""
    if message.text == "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", reply_markup=main_kb())
        await state.clear()
        return

    user_data = await state.get_data()
    exercise = user_data.get("current_exercise")

    if exercise:
        user_answers = [ans.strip().lower() for ans in message.text.split(",")]
        correct_answers = [ans.strip().lower() for ans in exercise['answers']]

        if user_answers == correct_answers:
            response = "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!** –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n"
        else:
            response = "‚ùå **–ï—Å—Ç—å –æ—à–∏–±–∫–∏.** –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n"
            response += ", ".join(exercise['answers']) + "\n\n"

        response += f"üìñ –ü–µ—Ä–µ–≤–æ–¥: {exercise['translation']}"

        await message.answer(response, reply_markup=main_kb())

        # ‚ùó –í–º–µ—Å—Ç–æ state.clear() ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        await send_exercise(message, state)


@router.message(ExerciseStates.waiting_for_quiz_answer)
async def check_quiz_answer(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    if message.text == "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞", reply_markup=main_kb())
        await state.clear()
        return

    user_data = await state.get_data()
    exercise = user_data.get("current_exercise")

    if exercise:
        if message.text.strip().lower().startswith(exercise['correct_answer'].strip().lower()):
            response = "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!** –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n"
        else:
            response = f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.** –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {exercise['correct_answer']}\n\n"

        response += f"üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {exercise['explanation']}"

        await message.answer(response, reply_markup=main_kb())

        # ‚ùó –í–º–µ—Å—Ç–æ state.clear() ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        await send_exercise(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
@router.message(F.text == "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ (AI)")
async def conversation_menu_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ (AI)' –∏–∑ –º–µ–Ω—é"""
    await start_conversation_handler(message, state)

@router.message(F.text == "üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (AI)")
async def exercises_menu_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (AI)' –∏–∑ –º–µ–Ω—é"""
    await send_exercise(message, state)

