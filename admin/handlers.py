import random

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from inline_keyboard.inline_kb_w_call_back import theme_keyboard
from reply_keyboard.rep_kb import main_kb
from aiogram.filters import Command
from config_data.config import logger
from sqlalchemy.ext.asyncio import AsyncSession
from database.functions import get_all_themes, get_words_by_theme_id, get_all_idioms
from aiogram.fsm.context import FSMContext
from utils.states import Quiz
from services.admin_functions import format_word_list


router = Router()


@router.message(Command("progress_help"))
async def cmd_progress_help(message: Message):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    help_text = (
        "üìä *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:*\n\n"

        "üîÑ *–°—Ç–∞—Ç—É—Å—ã —Å–ª–æ–≤:*\n"
        "‚Ä¢ üî¥ *–ù–æ–≤—ã–µ* - —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏ –∏–∑—É—á–∞—Ç—å\n"
        "‚Ä¢ üü° *–ò–∑—É—á–∞—é—Ç—Å—è* - 2+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ '–ù–æ–≤—ã—Ö')\n"
        "‚Ä¢ üü¢ *–í—ã—É—á–µ–Ω—ã* - 4+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é >70%\n"
        "‚Ä¢ üîµ *–û—Å–≤–æ–µ–Ω—ã* - 8+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é >85%\n\n"

        "‚≠ê *–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π:*\n"
        "‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +10 XP\n"
        "‚Ä¢ –ó–∞ –æ—à–∏–±–∫—É: +2 XP (—É—á–∏–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö!)\n"
        "‚Ä¢ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥—ã–µ 100 XP\n\n"

        "üî• *Streak (—Å–µ—Ä–∏—è –¥–Ω–µ–π):*\n"
        "‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–∏–∏\n"
        "‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è —Å–µ—Ä–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è\n\n"

        "üéØ *–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É:*\n"
        "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫ - –æ–Ω–∏ —Ç–æ–∂–µ –¥–∞—é—Ç –æ–ø—ã—Ç\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"
    )

    await message.answer(help_text, parse_mode="Markdown")

# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ç–µ–º—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ - "–ò–∑—É—á–∞–µ–º —Å–ª–æ–≤–∞"
# (—Ç.–µ. —Å–æ—Å—Ç–æ—è–Ω–∏–µ - no_quiz)- –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ
@router.callback_query(F.data.in_({str(i) for i in range(1, 19)}), Quiz.no_quiz)
async def demonstrating_word_by_theme(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∂–µ–∫—Ü–∏—é —Å–µ—Å—Å–∏–∏
):
    logger.info('started with word list')
    await state.clear()
    try:
        words = await get_words_by_theme_id(session, int(callback.data))  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã VocabularyRead –≤ —Å—Ç—Ä–æ–∫–∏
        formatted_words = [
            f"üáÆüáπ {word.italian_word} ‚ûî üá∑üá∫ {word.rus_word}"
            for word in words
        ]

        if not formatted_words:
            await callback.message.answer("–í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ üòî")
            return

        await callback.message.answer("\n".join(formatted_words))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ demonstrating_word_by_theme: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞")
        # –£–±–∏—Ä–∞–µ–º finally —Å session.close()



@router.message(F.text.startswith("üìö –§—Ä–∞–∑–∞ –¥–Ω—è"))
async def cmd_idiom(
    message: Message,
    state: FSMContext,
    session: AsyncSession  # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
):
    await state.set_state(Quiz.idiom)
    logger.info('idioms_started')

    try:
        idioms = await get_all_idioms(session)
        current_idiom = random.choice(idioms)
        await message.answer(f'{current_idiom.italian_idiom} - {current_idiom.rus_idiom}')
    except Exception as e:
        logger.error(f"Error in cmd_idiom: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–≥–æ–¥–Ω—è —Ñ—Ä–∞–∑—ã –Ω–µ—Ç")

@router.message(F.text.startswith("üìñ –ò–∑—É—á–∞–µ–º —Å–ª–æ–≤–∞"))
@router.message(Command('learn'))
async def cmd_learn(
    message: Message,
    state: FSMContext,
    session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
):
    await state.set_state(Quiz.no_quiz)
    logger.info('state - no_quiz is set')

    try:
        themes = await get_all_themes(session)
        keyboard = await theme_keyboard(themes)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É',
                           reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_learn: {e}")
        await message.answer("–û—à–∏–±–∫–∞.")


@router.message(F.text.startswith("üìù –¢—Ä–µ–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–∞"))
@router.message(Command('train'))
async def cmd_train(
        message: Message,
        state: FSMContext,
        session: AsyncSession
):
    await state.set_state(Quiz.quiz_start)
    logger.info('state - quiz_start is set')

    try:
        themes = await get_all_themes(session)
        keyboard = await theme_keyboard(themes)
        await message.answer(
            '–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –±—É–¥–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ç–µ–º –Ω–∏–∂–µ',
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_train: {e}")
        await message.answer("–û—à–∏–±–∫–∞.")
    finally:
        current_state = await state.get_state()
        logger.info(f"Current state: {current_state}")  # –î–æ–±–∞–≤–ª–µ–Ω f-string


@router.callback_query(F.data == 'back')
async def handle_back_button(callback_query: CallbackQuery):
    await callback_query.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                reply_markup=main_kb())


# @router.message(UNKNOWN_COMMANDS_FILTER)
# async def echo_message(msg: Message):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
#     –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
#     """
#     logger.info(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {msg.text}')
#     await msg.answer(f'"{msg.text}" - —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é')

