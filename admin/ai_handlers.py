from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.openai_service import get_openai_service, is_openai_available
from database.db_helper import db_helper
from sqlalchemy import select
from model.model import Vocabulary
from reply_keyboard.rep_kb import ai_explain_kb, ai_example_kb

router = Router()

class AIStates(StatesGroup):
    waiting_for_word_explain = State()
    waiting_for_word_example = State()

@router.message(Command("explain"))
async def cmd_explain(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é AI.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /explain <—Å–ª–æ–≤–æ>
    –ü—Ä–∏–º–µ—Ä: /explain ciao
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI
    if not await is_openai_available():
        await message.answer(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /explain <—Å–ª–æ–≤–æ>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /explain ciao")
        return

    word = args[1].lower()


        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.bot.send_chat_action(message.chat.id, "typing")

    service = get_openai_service()
    explanation = await service.explain_word(
        italian_word=word,
        russian_translation=""  # AI —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–µ—Ä–µ–≤–æ–¥
    )

    if explanation:
        response = f"ü§ñ **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}'**\n\n{explanation}"
        await message.answer(response, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("ai_status"))
async def cmd_ai_status(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OpenAI —Å–µ—Ä–≤–∏—Å–∞.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI-—Å–µ—Ä–≤–∏—Å—É.
    """
    service = get_openai_service()
    status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if service.enabled else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    response = (
        f"ü§ñ **–°—Ç–∞—Ç—É—Å AI-—Å–µ—Ä–≤–∏—Å–∞**\n"
        f"‚Ä¢ –°–µ—Ä–≤–∏—Å: {status}\n"
        f"‚Ä¢ –ö–ª—é—á API: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if service.api_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    if service.enabled:
        is_working = await service.check_api_key()
        response += f"\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if is_working else '‚ùå –û—à–∏–±–∫–∞'}"

    await message.answer(response)


@router.message(Command("example"))
async def cmd_example(message: Message):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Å–ª–æ–≤–æ–º.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /example <—Å–ª–æ–≤–æ>
    –ü—Ä–∏–º–µ—Ä: /example amore
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI
    if not await is_openai_available():
        await message.answer(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /example <—Å–ª–æ–≤–æ>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /example amore")
        return

    word = args[1].lower()


        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.bot.send_chat_action(message.chat.id, "typing")

    service = get_openai_service()
    example = await service.generate_example_sentence(word)

    if example:
        response = f"üìù **–ü—Ä–∏–º–µ—Ä —Å–æ —Å–ª–æ–≤–æ–º '{word}'**\n\n{example}"
        await message.answer(response, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "ü§ñ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ")
async def ai_explain_button(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ'.
    """
    if not await is_openai_available():
        await message.answer(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.",
            reply_markup=main_kb()
        )
        return

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤:",
        reply_markup=ai_explain_kb()
    )
    await state.set_state(AIStates.waiting_for_word_explain)


@router.message(F.text == "üîç –°—Ç–∞—Ç—É—Å AI")
async def ai_status_button(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å AI'.
    """
    service = get_openai_service()
    status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if service.enabled else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    response = (
        f"ü§ñ **–°—Ç–∞—Ç—É—Å AI-—Å–µ—Ä–≤–∏—Å–∞**\n"
        f"‚Ä¢ –°–µ—Ä–≤–∏—Å: {status}\n"
        f"‚Ä¢ –ö–ª—é—á API: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if service.api_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    if service.enabled:
        is_working = await service.check_api_key()
        response += f"\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if is_working else '‚ùå –û—à–∏–±–∫–∞'}"

    await message.answer(response)

@router.message(F.text == "üìù –ü—Ä–∏–º–µ—Ä —Å–æ —Å–ª–æ–≤–æ–º")
async def ai_example_button(message: Message, state: FSMContext):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ—Ä —Å —Å–ª–æ–≤–æ–º'.
    """
    if not await is_openai_available():
        await message.answer(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=main_kb()
        )
        return

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=ai_example_kb()
    )
    await state.set_state(AIStates.waiting_for_word_example)

@router.message(AIStates.waiting_for_word_explain)
async def process_word_explain(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
    """
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    word = message.text.replace("–û–±—ä—è—Å–Ω–∏—Ç—å: ", "").strip().lower()


    await message.bot.send_chat_action(message.chat.id, "typing")

    service = get_openai_service()
    explanation = await service.explain_word(
        italian_word=word,
        russian_translation=""  # AI —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç
    )

    if explanation:
        response = f"ü§ñ **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}'**\n\n{explanation}"
        await message.answer(response, reply_markup=main_kb(), parse_mode="Markdown")
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb()
        )

    await state.clear()


@router.message(AIStates.waiting_for_word_example)
async def process_word_example(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞.
    """
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–±–∏—Ä–∞–µ–º "–ü—Ä–∏–º–µ—Ä: " –µ—Å–ª–∏ –µ—Å—Ç—å)
    word = message.text.replace("–ü—Ä–∏–º–µ—Ä: ", "").strip().lower()

    await message.bot.send_chat_action(message.chat.id, "typing")

    service = get_openai_service()
    example = await service.generate_example_sentence(word)

    if example:
        response = f"üìù **–ü—Ä–∏–º–µ—Ä —Å–æ —Å–ª–æ–≤–æ–º '{word}'**\n\n{example}"
        await message.answer(response, reply_markup=main_kb(), parse_mode="Markdown")
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb()
        )

    await state.clear()

# –î–û–ë–ê–í–ò–¢–¨ –∏–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
from reply_keyboard.rep_kb import main_kb

